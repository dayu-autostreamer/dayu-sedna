/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/adayangolzz/sedna-modified/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JointMultiEdgeServiceLister helps list JointMultiEdgeServices.
// All objects returned here must be treated as read-only.
type JointMultiEdgeServiceLister interface {
	// List lists all JointMultiEdgeServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JointMultiEdgeService, err error)
	// JointMultiEdgeServices returns an object that can list and get JointMultiEdgeServices.
	JointMultiEdgeServices(namespace string) JointMultiEdgeServiceNamespaceLister
	JointMultiEdgeServiceListerExpansion
}

// jointMultiEdgeServiceLister implements the JointMultiEdgeServiceLister interface.
type jointMultiEdgeServiceLister struct {
	indexer cache.Indexer
}

// NewJointMultiEdgeServiceLister returns a new JointMultiEdgeServiceLister.
func NewJointMultiEdgeServiceLister(indexer cache.Indexer) JointMultiEdgeServiceLister {
	return &jointMultiEdgeServiceLister{indexer: indexer}
}

// List lists all JointMultiEdgeServices in the indexer.
func (s *jointMultiEdgeServiceLister) List(selector labels.Selector) (ret []*v1alpha1.JointMultiEdgeService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JointMultiEdgeService))
	})
	return ret, err
}

// JointMultiEdgeServices returns an object that can list and get JointMultiEdgeServices.
func (s *jointMultiEdgeServiceLister) JointMultiEdgeServices(namespace string) JointMultiEdgeServiceNamespaceLister {
	return jointMultiEdgeServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JointMultiEdgeServiceNamespaceLister helps list and get JointMultiEdgeServices.
// All objects returned here must be treated as read-only.
type JointMultiEdgeServiceNamespaceLister interface {
	// List lists all JointMultiEdgeServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JointMultiEdgeService, err error)
	// Get retrieves the JointMultiEdgeService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JointMultiEdgeService, error)
	JointMultiEdgeServiceNamespaceListerExpansion
}

// jointMultiEdgeServiceNamespaceLister implements the JointMultiEdgeServiceNamespaceLister
// interface.
type jointMultiEdgeServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JointMultiEdgeServices in the indexer for a given namespace.
func (s jointMultiEdgeServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JointMultiEdgeService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JointMultiEdgeService))
	})
	return ret, err
}

// Get retrieves the JointMultiEdgeService from the indexer for a given namespace and name.
func (s jointMultiEdgeServiceNamespaceLister) Get(name string) (*v1alpha1.JointMultiEdgeService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jointmultiedgeservice"), name)
	}
	return obj.(*v1alpha1.JointMultiEdgeService), nil
}
